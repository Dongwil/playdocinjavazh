.. playdocinjavazh documentation master file, created by
   sphinx-quickstart on Thu May  5 23:05:51 2016.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Play framework 2.5.x教程（For Java)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

* :ref:`genindex`

#########
Play 教程
#########

Play框架的文档说明了其可用的特性, 但是文档并不会说明如何从头到尾创建一个应用。所以我们就有了这个教程。

教程对于展示一个简单的应用是如何工作的十分有用，特别是当涉及到和其它系统比如数据库和其它的JavaScript框架一起工作时。

#############
Activator 模板
#############

许多Activator模板带有易懂的教程来指引你使用特定的被这个模板所使用的技术。

一个全面的列表可以在Activator Web Interface被找到。

此外，模板也被发布在Lightbend网站上，一个关于Play的包含有官方和社区的贡献的全面的列表能在这里被找到。

Lightbend同样维护了大量关于Activator的模板。你可以运行命令activator ui然后在浏览器里打开http://127.0.0.1:8888/并点击Tutorial（教程）选项卡，这样你就能看到一系列的内置教程了。

###############
一些英文的视频教程
###############

嗯，这一段文字原文是没有的，不过原文这里提供了一些英文的视频教程，假如你能够很好地听英语的话（能听看不懂哈哈哈）你就去官网https://www.playframework.com/documentation/2.5.x/Tutorials\#play-tutorials看吧。

#################
一些英文的第三方教程
#################

嗯，这一段文字原文也是没有的，一些英文书什么的，你们要是愿意看英文的第三方的还会来看我这蹩脚的翻译了么哈哈哈。官网上也有，就是上面那个链接，想看的点进去看吧哈哈哈。

####
术语
####

呃，这一段文字原文还是没有的哈哈哈，我比较懒，一些术语翻译过来的中文为了避免歧义，我都会单独放到这一节来

.. toctree::
   :maxdepth: 1

Action行为

Controller控制器

Result（直译为结果，不妥，故不翻译）

HT（HyperText）超文本

HTTP（超文本传输协议，不翻译）

HTML超文本标记语言

Session（不翻译，做WEB的人应该懂的）

Flash scope（不翻译，感觉难翻译）

Body块（儿）

WEB（这要翻译？）

Socket(不翻译，套接字)

SQL（不翻译，结构化查询语言）

ORM（不翻译，对象关系映射）

###############
对Java的主要概念
###############

着看起来像是官方的目录呢，由于我的翻译会有一个自动生成的目录，我就把官方的目录也单独翻译出来吧！

@@@@@@@@
HTTP编程
@@@@@@@@

行为、控制器、Result

HTTP路由

操作HTTP响应

Session和Flash scope（呵呵呵这个真不知道怎么翻似乎也没必要翻）

块解析器

行为的功能

HTTP请求处理器（HTTP Request Handler）、行为创建器（ActionCreator）

@@@@@@@@@@@@
异步HTTP编程
@@@@@@@@@@@@

处理异步结果

响应HTTP流

Comet

WebSockets

@@@@@@@@@@@@@
Twirl模板引擎
@@@@@@@@@@@@@

模板语法

通用案例

定制语法

@@@@@@@@@@@@@
表单提交和验证
@@@@@@@@@@@@@

定义表单

使用表单模板助手

防止跨站攻击

@@@@@@@@
与XX工作
@@@@@@@@

Json

XML

处理上传请求

@@@@@@@@@@@@@
访问SQL数据库
@@@@@@@@@@@@@

配置并使用JDBC

与JPA整合

使用Ebean ORM

@@@@@@@@
使用缓存
@@@@@@@@

使用缓存

@@@@@@@@@@@
请求WEB服务
@@@@@@@@@@@

Play WEB服务 API

连接到OpenID服务

访问使用OAuth保护的服务

@@@@@@@@@
整合AKKA
@@@@@@@@@

整合AKKA

@@@@@@
国际化
@@@@@@

国际化

@@@@@@@@
依赖注入
@@@@@@@@

使用Guice

@@@@@@@@
应用部署
@@@@@@@@

应用部署

基本行为（Essential Actions）

HTTP过滤

异常处理

全局设置

@@@@@@@@@@@
调试你的应用
@@@@@@@@@@@

编写测试

编写函数测试

使用Guice测试

数据库测试

WEB服务器客户端测试

@@@@@
日志
@@@@@

记录日志

########
HTTP编程
########

@@@@@@@@@@@@@@@@@@@
行为、控制器、Result
@@@@@@@@@@@@@@@@@@@

!!!!!!!!!
什么是行为
!!!!!!!!!

大部分Play接收到的请求都会交给Action处理

一个Action基本上就是一个处理请求的参数并且产生一个回应发送给客户端的Java方法。

::

  public Result index() {
    return ok("Got request " + request() + "!");
  }

一个Action返回一个`play.mvc.Result`类型的变量，表示被发送到客户端的HTTP响应。在这个例子里`ok`方法构造了一个**200 OK**回应包含了一个**text/plain**回应块。

!!!!!!
控制器
!!!!!!

一个控制器是一个`play.mvc.Controller`的子类，它将一系列action组合起来了。

::

  package controllers;

  import play.*;
  import play.mvc.*;

  public class Application extends Controller {

    public Result index() {
        return ok("It works!");
    }

  }

上面这是最简的定义一个没有参数的Action方法返回一个`Result`变量的一个语法：

Action也可以拥有一些（个）参数

::

  public Result index(String name) {
    return ok("Hello " + name);
  }

这些参数将会被`Router`解析并被请求的URL里的变量所解析。这些参数能够被从URL地址或者URL字符串中解析。

!!!!!!!
Results
!!!!!!!

让我们从一些简单的Results开始：一个HTTP result有状态码，一系列HTTP头，以及一个正文发送到客户端。

这些results将会被定义为`play.mvc.Result`，并且`play.mvc.Result`类提供一系列小助手来产生一个标准的HTTP result，比如上面我们用到的`ok`方法：

::

  public Result index() {
    return ok("Hello world!");
  }

这里是许多创建各种各样的result的例子：

::

  Result ok = ok("Hello world!");
  Result notFound = notFound();
  Result pageNotFound = notFound("<h1>Page not found</h1>").as("text/html");
  Result badRequest = badRequest(views.html.form.render(formWithErrors));
  Result oops = internalServerError("Oops");
  Result anyStatus = status(488, "Strange response type");

大部分小助手能够在`play.mvc.Results`这个类中找到。

!!!!!!!!!!!!!!!!!!!!!!!!
重定向也是简单的一种result
!!!!!!!!!!!!!!!!!!!!!!!!

重定向浏览器到另一个URL只是另一种result。然而，这些result并没有返回正文。

这里是一些能够创建重定向result的小助手：

::

  public Result index() {
    return redirect("/user/home");
  }

这个重定向方法默认使用`303 SEE_OTHER`响应类型，但是你能够指定一个更特别的状态码进行回应。

::

  public Result index() {
    return temporaryRedirect("/user/home");
  }
